searchNodes=[{"doc":"ComBase emulates a distribtued application connected over a potentially asynchronous network.","ref":"ComBase.html","title":"ComBase","type":"module"},{"doc":"Add to the list of fuzzers used when messages are received. Note this function must be called before any messages are sent.","ref":"ComBase.html#append_fuzzers/2","title":"ComBase.append_fuzzers/2","type":"function"},{"doc":"Send message to all active processes.","ref":"ComBase.html#broadcast/2","title":"ComBase.broadcast/2","type":"function"},{"doc":"Get the current fuzzer list","ref":"ComBase.html#get_fuzzers/1","title":"ComBase.get_fuzzers/1","type":"function"},{"doc":"Initialize the communication base.","ref":"ComBase.html#init/0","title":"ComBase.init/0","type":"function"},{"doc":"Get a list of all registed processes","ref":"ComBase.html#list_proc/1","title":"ComBase.list_proc/1","type":"function"},{"doc":"Mark this process as one whose messages (i.e., those sent or received by the process) should not be fuzzed. This is meant as an aid to testing, and should not be used by code not within a test.","ref":"ComBase.html#mark_unfuzzable/1","title":"ComBase.mark_unfuzzable/1","type":"function"},{"doc":"Get current time.","ref":"ComBase.html#now/1","title":"ComBase.now/1","type":"function"},{"doc":"Send a message to the process named proc. Message can be anything. ctx should be the context in which the process was created.","ref":"ComBase.html#send/3","title":"ComBase.send/3","type":"function"},{"doc":"Set current time.","ref":"ComBase.html#set_time/2","title":"ComBase.set_time/2","type":"function"},{"doc":"Spawn a process with supplied name and function.","ref":"ComBase.html#spawn/3","title":"ComBase.spawn/3","type":"function"},{"doc":"Terminate communication base.","ref":"ComBase.html#terminate/1","title":"ComBase.terminate/1","type":"function"},{"doc":"Set a timer for the given number of milliseconds, and send a message with the atom :timer when done.","ref":"ComBase.html#timer/2","title":"ComBase.timer/2","type":"function"},{"doc":"Set a timer for the given number of milliseconds, and send a message with the atom message when done.","ref":"ComBase.html#timer/3","title":"ComBase.timer/3","type":"function"},{"doc":"Translate time (gotten from System.monotonic_time()) to time at process p. This should only be used for testing.","ref":"ComBase.html#translate_time/3","title":"ComBase.translate_time/3","type":"function"},{"doc":"Get ID for the current process.","ref":"ComBase.html#whoami/1","title":"ComBase.whoami/1","type":"function"},{"doc":"This module is a wrapper around ComBase that simplifies its use in student code. It does so by saving the context as a named Agent, and retrieving it when necessary.","ref":"Emulation.html","title":"Emulation","type":"module"},{"doc":"Add to the list of fuzzers used when messages are received. Note this function must be called before any messages are sent.","ref":"Emulation.html#append_fuzzers/1","title":"Emulation.append_fuzzers/1","type":"function"},{"doc":"Send message to all active processes.","ref":"Emulation.html#broadcast/1","title":"Emulation.broadcast/1","type":"function"},{"doc":"Cancel a timer previously set using either timer/1 or timer/2. timer is the reference returned by those calls. Returns the number of milliseconds left on the timer or false if the timer had already expired.","ref":"Emulation.html#cancel_timer/1","title":"Emulation.cancel_timer/1","type":"function"},{"doc":"Convert emulation time units (e.g., from succesive calls to now) into microsecons. This is useful for human readable output.","ref":"Emulation.html#emu_to_micros/1","title":"Emulation.emu_to_micros/1","type":"function"},{"doc":"Convert emulation time units (e.g., from succesive calls to now) into milliseconds. This is useful for human readable output.","ref":"Emulation.html#emu_to_millis/1","title":"Emulation.emu_to_millis/1","type":"function"},{"doc":"Get the current fuzzer list","ref":"Emulation.html#get_fuzzers/0","title":"Emulation.get_fuzzers/0","type":"function"},{"doc":"Setup the emulation","ref":"Emulation.html#init/0","title":"Emulation.init/0","type":"function"},{"doc":"Get a list of all registed processes","ref":"Emulation.html#list_proc/0","title":"Emulation.list_proc/0","type":"function"},{"doc":"Mark this process as one whose messages (i.e., those sent or received by the process) should not be fuzzed. This is meant as an aid to testing, and should not be used by code not within a test.","ref":"Emulation.html#mark_unfuzzable/0","title":"Emulation.mark_unfuzzable/0","type":"function"},{"doc":"Convert milliseconds to emulation time units. This is useful when providing estimates.","ref":"Emulation.html#millis_to_emu/1","title":"Emulation.millis_to_emu/1","type":"function"},{"doc":"Get current time.","ref":"Emulation.html#now/0","title":"Emulation.now/0","type":"function"},{"doc":"Send a message to the process named proc. Message can be anything. ctx should be the context in which the process was created.","ref":"Emulation.html#send/2","title":"Emulation.send/2","type":"function"},{"doc":"Set current time.","ref":"Emulation.html#set_time/1","title":"Emulation.set_time/1","type":"function"},{"doc":"Spawn a process with supplied name and function.","ref":"Emulation.html#spawn/2","title":"Emulation.spawn/2","type":"function"},{"doc":"Teardown emulation","ref":"Emulation.html#terminate/0","title":"Emulation.terminate/0","type":"function"},{"doc":"Set a timer for ms milliseconds, and send a message to the calling process with the atom :timer when done.","ref":"Emulation.html#timer/1","title":"Emulation.timer/1","type":"function"},{"doc":"Set a timer for ms milliseconds, and send a message to the calling process with atom when done.","ref":"Emulation.html#timer/2","title":"Emulation.timer/2","type":"function"},{"doc":"Translate time (gotten from System.monotonic_time()) to time at process p. This should only be used for testing.","ref":"Emulation.html#translate_time/2","title":"Emulation.translate_time/2","type":"function"},{"doc":"Get ID for the current process.","ref":"Emulation.html#whoami/0","title":"Emulation.whoami/0","type":"function"},{"doc":"Fuzzers is a set of network fuzzing tools.","ref":"Fuzzers.html","title":"Fuzzers","type":"module"},{"doc":"Build a chain of network fuzzing steps.","ref":"Fuzzers.html#build_fuzz_chain/4","title":"Fuzzers.build_fuzz_chain/4","type":"function"},{"doc":"Fuzzer for delaying messages. Delays are drawn from an exponential distribution with the mean given here.","ref":"Fuzzers.html#delay/1","title":"Fuzzers.delay/1","type":"function"},{"doc":"Fuzzer for dropping packets. Drops are uniformly random with supplied probability.","ref":"Fuzzers.html#drop/1","title":"Fuzzers.drop/1","type":"function"},{"doc":"Add a fuzzer that drops messages, and records them in the supplied logger.","ref":"Fuzzers.html#drop_record/2","title":"Fuzzers.drop_record/2","type":"function"},{"doc":"Return a list of message logs from a recording.","ref":"Fuzzers.html#get_logs/1","title":"Fuzzers.get_logs/1","type":"function"},{"doc":"Add a fuzzer that logs messages. Use get_logs/1 to retrieve the messages.","ref":"Fuzzers.html#log_messages/0","title":"Fuzzers.log_messages/0","type":"function"},{"doc":"","ref":"EmulatorError.html","title":"EmulatorError","type":"exception"}]